%% Import data from text file.
% Script for importing data from the following text file:
%
%    C:\Users\scorpii\Documents\Space\Rocketry\Performance\rocketry-performance\data\openrocket-cr246-m1830-nowind.csv
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2015/12/12 11:42:05

%% Initialize variables.
filename = 'C:\Users\scorpii\Documents\Space\Rocketry\Performance\rocketry-performance\data\openrocket-cr246-m1830-nowind.csv';
delimiter = ',';

%% Read columns of data as strings:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter,  'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric strings to numbers.
% Replace non-numeric strings with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,25,27,28,29,30,31,32,33,34,35,44,45,46,47,48,50,51,52,53,54,55]
    % Converts strings in the input cell array to numbers. Replaced non-numeric
    % strings with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(thousandsRegExp, ',', 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric strings to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end

%% Split data into numeric and cell columns.
rawNumericColumns = raw(:, [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,25,27,28,29,30,31,32,33,34,35,44,45,46,47,48,50,51,52,53,54,55]);
rawCellColumns = raw(:, [24,26,36,37,38,39,40,41,42,43,49]);


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),rawNumericColumns); % Find non-numeric cells
rawNumericColumns(R) = {NaN}; % Replace non-numeric cells

%% Allocate imported array to column variable names
VarName1 = cell2mat(rawNumericColumns(:, 1));
Altitudem = cell2mat(rawNumericColumns(:, 2));
Verticalvelocityms = cell2mat(rawNumericColumns(:, 3));
Verticalaccelerationms = cell2mat(rawNumericColumns(:, 4));
Totalvelocityms = cell2mat(rawNumericColumns(:, 5));
Totalaccelerationms = cell2mat(rawNumericColumns(:, 6));
PositionEastoflaunchm = cell2mat(rawNumericColumns(:, 7));
PositionNorthoflaunchm = cell2mat(rawNumericColumns(:, 8));
Lateraldistancem = cell2mat(rawNumericColumns(:, 9));
Lateraldirection = cell2mat(rawNumericColumns(:, 10));
Lateralvelocityms = cell2mat(rawNumericColumns(:, 11));
Lateralaccelerationms = cell2mat(rawNumericColumns(:, 12));
Latitude = cell2mat(rawNumericColumns(:, 13));
Longitude = cell2mat(rawNumericColumns(:, 14));
Gravitationalaccelerationms = cell2mat(rawNumericColumns(:, 15));
Angleofattack = cell2mat(rawNumericColumns(:, 16));
Rollrates = cell2mat(rawNumericColumns(:, 17));
Pitchrates = cell2mat(rawNumericColumns(:, 18));
Yawrates = cell2mat(rawNumericColumns(:, 19));
Massg = cell2mat(rawNumericColumns(:, 20));
Propellantmassg = cell2mat(rawNumericColumns(:, 21));
Longitudinalmomentofinertiakgm = cell2mat(rawNumericColumns(:, 22));
Rotationalmomentofinertiakgm = cell2mat(rawNumericColumns(:, 23));
CPlocationcm = rawCellColumns(:, 1);
CGlocationcm = cell2mat(rawNumericColumns(:, 24));
Stabilitymargincalibers = rawCellColumns(:, 2);
Machnumber = cell2mat(rawNumericColumns(:, 25));
Reynoldsnumber = cell2mat(rawNumericColumns(:, 26));
ThrustN = cell2mat(rawNumericColumns(:, 27));
DragforceN = cell2mat(rawNumericColumns(:, 28));
Dragcoefficient = cell2mat(rawNumericColumns(:, 29));
Axialdragcoefficient = cell2mat(rawNumericColumns(:, 30));
Frictiondragcoefficient = cell2mat(rawNumericColumns(:, 31));
Pressuredragcoefficient = cell2mat(rawNumericColumns(:, 32));
Basedragcoefficient = cell2mat(rawNumericColumns(:, 33));
Normalforcecoefficient = rawCellColumns(:, 3);
Pitchmomentcoefficient = rawCellColumns(:, 4);
Yawmomentcoefficient = rawCellColumns(:, 5);
Sideforcecoefficient = rawCellColumns(:, 6);
Rollmomentcoefficient = rawCellColumns(:, 7);
Rollforcingcoefficient = rawCellColumns(:, 8);
Rolldampingcoefficient = rawCellColumns(:, 9);
Pitchdampingcoefficient = rawCellColumns(:, 10);
Coriolisaccelerationms = cell2mat(rawNumericColumns(:, 34));
Referencelengthcm = cell2mat(rawNumericColumns(:, 35));
Referenceareacm = cell2mat(rawNumericColumns(:, 36));
Verticalorientationzenith = cell2mat(rawNumericColumns(:, 37));
Lateralorientationazimuth = cell2mat(rawNumericColumns(:, 38));
Windvelocityms = rawCellColumns(:, 11);
AirtemperatureC = cell2mat(rawNumericColumns(:, 39));
Airpressurembar = cell2mat(rawNumericColumns(:, 40));
Speedofsoundms = cell2mat(rawNumericColumns(:, 41));
Simulationtimesteps = cell2mat(rawNumericColumns(:, 42));
Computationtimes = cell2mat(rawNumericColumns(:, 43));
DynamicPressurembar = cell2mat(rawNumericColumns(:, 44));

%% Clear temporary variables
clearvars filename delimiter formatSpec fileID dataArray ans raw col numericData rawData row regexstr result numbers invalidThousandsSeparator thousandsRegExp me rawNumericColumns rawCellColumns R;