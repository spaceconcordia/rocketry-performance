%% Globals
meter2feet = 3.28; 
upperbound = 12000/meter2feet;
lowerbound = 9500/meter2feet;

%% Plot shaded region for competition bounds
x1 = Rocksim_Time;
y1 = linspace(upperbound,upperbound,size(Rocksim_Time,1));
y2 = linspace(lowerbound,lowerbound,size(Rocksim_Time,1));

%% Find value index of apogee for each source
% OpenRocket
indexmax_openrocket = find(max(openrocket_Altitudem) == openrocket_Altitudem);
time_to_apogee_openrocket = openrocket_VarName1(indexmax_openrocket);
openrocket_altitude_max = openrocket_Altitudem(indexmax_openrocket);

% RasAero
indexmax_rasaero = find(max(rasaero_Altitudeft) == rasaero_Altitudeft);
time_to_apogee_rasaero = rasaero_Timesec(indexmax_rasaero);
rasaero_altitude_max = rasaero_Altitudeft(indexmax_rasaero);

% RockSim
indexmax_Rocksim = find(max(Rocksim_AltitudeFeet) == Rocksim_AltitudeFeet)
time_to_apogee_Rocksim = Rocksim_Time(indexmax_Rocksim)
Rocksim_altitude_max = Rocksim_AltitudeFeet(indexmax_Rocksim)

%% Plot altitude error
plot(tout, altitude, 'm--*')
hold on
plot(...
    openrocket_VarName1(1:indexmax_openrocket), ...
    openrocket_Altitudem(1:indexmax_openrocket), ...
    'b--.'...
);
plot( ...
    rasaero_Timesec(1:indexmax_rasaero), ...
    rasaero_Altitudeft(1:indexmax_rasaero)/meter2feet, ...
    'c--o' ...
);
plot( ...
    Rocksim_Time(1:indexmax_Rocksim), ...
    Rocksim_AltitudeFeet(1:indexmax_Rocksim)/meter2feet, ...
    'k- .' ...
);
legend('Matlab','OpenRocket','Rasaero','Rocksim',)
ha = shadedplot(x1, y1, y2, [0.7, 1, 0.7], 'r'); %first area is red
hold off

%% fill region in between
%{
hold on
X=[tout,fliplr(tout)]; %#create continuous x value array for plotting
Y=[openrocket_altitude(1:arraysize),fliplr(altitude)]; %#create y values for out and then back
fill(X,Y,'g'); %#plot filled area
hold off
%}

%% Graph details
clear title xlabel ylabel
title('Altitude vs Time');
grid on;
xlabel('Time (s)');
ylabel('Altitude (m)');

%% provide imperial units on right vertical axis
ylimit = [0,4000]; % ylimits in meters
n=9; % how many tickmarks
ytic = linspace(ylimit(1),ylimit(2),n); 
ax1 = gca;
set(ax1,'ylim', ylimit, 'ytick', ytic);
ylabel('in meters')
ax2 = axes('Position',get(ax1,'Position'),...
    'YAxisLocation','right','color','none');
set(ax2,'ylim',...
    ylimit*meter2feet, 'ytick',ytic*meter2feet,...
    'xtick',get(ax1,'xtick'), 'xticklabel',''...
    )
ylabel('in feet');

%% conditionally save the plot
if exist('saveplots')
    if saveplots
        saveas(gcf, '../documentation/images/plots/error_altitude_plot.png');
        export_fig error_altitude_plot.png -m2
    end
end
