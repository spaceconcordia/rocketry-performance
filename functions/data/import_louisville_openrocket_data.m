%% Import data from text file.
% Script for importing data from the following text file:
%
%    C:\Users\scorpii\Documents\Space\Rocketry\Performance\rocketry-performance\data\Simulations\Louisville_FRR_Openrocket.csv
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2016/02/24 19:18:06

%% Initialize variables.
filename = 'C:\Users\scorpii\Documents\Space\Rocketry\Performance\rocketry-performance\data\Simulations\Louisville_FRR_Openrocket.csv';
delimiter = ',';
startRow = 7;

%% Read columns of data as strings:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'HeaderLines' ,startRow-1, 'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric strings to numbers.
% Replace non-numeric strings with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,25,27,28,29,30,31,32,33,34,35,44,45,46,47,48,50,51,52,53,54]
    % Converts strings in the input cell array to numbers. Replaced non-numeric
    % strings with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(thousandsRegExp, ',', 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric strings to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end

%% Split data into numeric and cell columns.
rawNumericColumns = raw(:, [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,25,27,28,29,30,31,32,33,34,35,44,45,46,47,48,50,51,52,53,54]);
rawCellColumns = raw(:, [24,26,36,37,38,39,40,41,42,43,49]);


%% Exclude rows with non-numeric cells
J = ~all(cellfun(@(x) (isnumeric(x) || islogical(x)) && ~isnan(x),rawNumericColumns),2); % Find rows with non-numeric cells
rawNumericColumns(J,:) = [];
rawCellColumns(J,:) = [];

%% Allocate imported array to column variable names
openrocket_VarName1 = cell2mat(rawNumericColumns(:, 1));
openrocket_Altitudem = cell2mat(rawNumericColumns(:, 2));
openrocket_Verticalvelocityms = cell2mat(rawNumericColumns(:, 3));
openrocket_Verticalaccelerationms = cell2mat(rawNumericColumns(:, 4));
openrocket_Totalvelocityms = cell2mat(rawNumericColumns(:, 5));
openrocket_Totalaccelerationms = cell2mat(rawNumericColumns(:, 6));
openrocket_PositionEastoflaunchm = cell2mat(rawNumericColumns(:, 7));
openrocket_PositionNorthoflaunchm = cell2mat(rawNumericColumns(:, 8));
openrocket_Lateraldistancem = cell2mat(rawNumericColumns(:, 9));
openrocket_Lateraldirection = cell2mat(rawNumericColumns(:, 10));
openrocket_Lateralvelocityms = cell2mat(rawNumericColumns(:, 11));
openrocket_Lateralaccelerationms = cell2mat(rawNumericColumns(:, 12));
openrocket_Latitude = cell2mat(rawNumericColumns(:, 13));
openrocket_Longitude = cell2mat(rawNumericColumns(:, 14));
openrocket_Gravitationalaccelerationms = cell2mat(rawNumericColumns(:, 15));
openrocket_Angleofattack = cell2mat(rawNumericColumns(:, 16));
openrocket_Rollrates = cell2mat(rawNumericColumns(:, 17));
openrocket_Pitchrates = cell2mat(rawNumericColumns(:, 18));
openrocket_Yawrates = cell2mat(rawNumericColumns(:, 19));
openrocket_Massg = cell2mat(rawNumericColumns(:, 20));
openrocket_Propellantmassg = cell2mat(rawNumericColumns(:, 21));
openrocket_Longitudinalmomentofinertiakgm = cell2mat(rawNumericColumns(:, 22));
openrocket_Rotationalmomentofinertiakgm = cell2mat(rawNumericColumns(:, 23));
openrocket_CPlocationcm = rawCellColumns(:, 1);
openrocket_CGlocationcm = cell2mat(rawNumericColumns(:, 24));
openrocket_Stabilitymargincalibers = rawCellColumns(:, 2);
openrocket_Machnumber = cell2mat(rawNumericColumns(:, 25));
openrocket_Reynoldsnumber = cell2mat(rawNumericColumns(:, 26));
openrocket_ThrustN = cell2mat(rawNumericColumns(:, 27));
openrocket_DragforceN = cell2mat(rawNumericColumns(:, 28));
openrocket_Dragcoefficient = cell2mat(rawNumericColumns(:, 29));
openrocket_Axialdragcoefficient = cell2mat(rawNumericColumns(:, 30));
openrocket_Frictiondragcoefficient = cell2mat(rawNumericColumns(:, 31));
openrocket_Pressuredragcoefficient = cell2mat(rawNumericColumns(:, 32));
openrocket_Basedragcoefficient = cell2mat(rawNumericColumns(:, 33));
openrocket_Normalforcecoefficient = rawCellColumns(:, 3);
openrocket_Pitchmomentcoefficient = rawCellColumns(:, 4);
openrocket_Yawmomentcoefficient = rawCellColumns(:, 5);
openrocket_Sideforcecoefficient = rawCellColumns(:, 6);
openrocket_Rollmomentcoefficient = rawCellColumns(:, 7);
openrocket_Rollforcingcoefficient = rawCellColumns(:, 8);
openrocket_Rolldampingcoefficient = rawCellColumns(:, 9);
openrocket_Pitchdampingcoefficient = rawCellColumns(:, 10);
openrocket_Coriolisaccelerationms = cell2mat(rawNumericColumns(:, 34));
openrocket_Referencelengthcm = cell2mat(rawNumericColumns(:, 35));
openrocket_Referenceareacm = cell2mat(rawNumericColumns(:, 36));
openrocket_Verticalorientationzenith = cell2mat(rawNumericColumns(:, 37));
openrocket_Lateralorientationazimuth = cell2mat(rawNumericColumns(:, 38));
openrocket_Windvelocityms = rawCellColumns(:, 11);
openrocket_AirtemperatureC = cell2mat(rawNumericColumns(:, 39));
openrocket_Airpressurembar = cell2mat(rawNumericColumns(:, 40));
openrocket_Speedofsoundms = cell2mat(rawNumericColumns(:, 41));
openrocket_Simulationtimesteps = cell2mat(rawNumericColumns(:, 42));
openrocket_Computationtimes = cell2mat(rawNumericColumns(:, 43));

%% Clear temporary variables
clearvars filename delimiter startRow formatSpec fileID dataArray ans raw col numericData rawData row regexstr result numbers invalidThousandsSeparator thousandsRegExp me rawNumericColumns rawCellColumns J;
